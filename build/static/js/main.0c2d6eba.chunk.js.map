{"version":3,"sources":["components/Filter.jsx","components/PersonForm.jsx","services/persons.jsx","components/Persons.jsx","components/Notification.jsx","App.js","serviceWorker.js","index.js"],"names":["Filter","setFilter","onChange","event","target","value","PersonForm","addPerson","setNewName","setNewNumber","onSubmit","type","baseUrl","axios","get","newObject","post","id","put","delete","Persons","persons","setPersons","filter","person","name","toLowerCase","includes","map","key","number","onClick","window","confirm","personService","then","response","data","removePerson","Notification","message","notificationStyle","color","isError","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","className","App","useState","newName","newNumber","errorMessage","setErrorMessage","setIsError","useEffect","preventDefault","obj","length","some","find","setTimeout","catch","error","copy","push","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"mOAUeA,EARA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAChB,OACE,gDACkB,2BAAOC,SAAU,SAAAC,GAAK,OAAIF,EAAUE,EAAMC,OAAOC,YCaxDC,EAhBI,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC3C,OACE,0BAAMC,SAAUH,GACd,sCACQ,2BAAOL,SAAU,SAAAC,GAAK,OAAIK,EAAWL,EAAMC,OAAOC,WAE1D,wCACU,2BAAOH,SAAU,SAAAC,GAAK,OAAIM,EAAaN,EAAMC,OAAOC,WAE9D,6BACE,4BAAQM,KAAK,UAAb,U,gBCXFC,EAAU,oCAkBD,EAhBA,WACb,OAAOC,IAAMC,IAAIF,IAeJ,EAZA,SAAAG,GACb,OAAOF,IAAMG,KAAKJ,EAASG,IAWd,EARA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IAOxB,EAJA,SAAAE,GACb,OAAOJ,IAAMM,OAAN,UAAgBP,EAAhB,YAA2BK,KCgBrBG,EA7BC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAWtC,OACE,6BACGF,EACEE,QAAO,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,cAAcC,SAASJ,EAAOG,kBAC3DE,KAAI,SAAAJ,GACH,OACE,yBAAKK,IAAKL,EAAOC,MACf,2BACGD,EAAOC,KADV,IACiBD,EAAOM,QAExB,4BAAQC,QAAS,kBApBR,SAAAP,GACfQ,OAAOC,QAAQ,iBAAmBT,EAAOC,KAAO,MAClDS,EAAqBV,EAAOP,IAAIkB,MAAK,WACnCD,IAAuBC,MAAK,SAAAC,GAC1Bd,EAAWc,EAASC,YAgBOC,CAAad,KAApC,gBCACe,EAtBM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAChBC,EAAoB,CACxBC,MAF2C,EAAdC,QAEZ,MAAQ,QACzBC,WAAY,YACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,IAGhB,OAAgB,OAAZT,EACK,KAIP,yBAAKU,MAAOT,EAAmBU,UAAU,SACtCX,ICwDQY,EApEH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACThC,EADS,KACAC,EADA,OAEc+B,mBAAS,IAFvB,mBAETC,EAFS,KAEA9C,EAFA,OAGkB6C,mBAAS,IAH3B,mBAGTE,EAHS,KAGE9C,EAHF,OAIY4C,mBAAS,IAJrB,mBAIT9B,EAJS,KAIDtB,EAJC,OAKwBoD,mBAAS,MALjC,mBAKTG,EALS,KAKKC,EALL,OAMcJ,oBAAS,GANvB,mBAMTV,EANS,KAMAe,EANA,KAQhBC,qBAAU,WACRzB,IAAuBC,MAAK,SAAAC,GAC1Bd,EAAWc,EAASC,WAErB,IA2CH,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcG,QAASgB,EAAcb,QAASA,IAC9C,kBAAC,EAAD,CAAQ1C,UAAWA,IACnB,kBAAC,EAAD,CAAYM,UA9CE,SAAAJ,GAChBA,EAAMyD,iBACN,IAAMC,EAAM,CAAE5C,GAAII,EAAQA,EAAQyC,OAAS,GAAG7C,GAAK,EAAGQ,KAAM6B,EAASxB,OAAQyB,GAC7E,GAAKlC,EAAQ0C,MAAK,SAAAvC,GAAM,OAAIA,EAAOC,OAAS6B,KAUtCtB,OAAOC,QAAP,UAAkBqB,EAAlB,4EACFpB,EACUb,EAAQ2C,MAAK,SAAAxC,GAAM,OAAIA,EAAOC,OAAS6B,KAASrC,GAAI4C,GAC3D1B,MAAK,SAAAC,GACJqB,EAAgB,sBAAD,OAAuBH,EAAvB,MACfW,YAAW,WACTR,EAAgB,MAChBC,GAAW,KACV,KACHxB,IAAuBC,MAAK,SAAAC,GAC1Bd,EAAWc,EAASC,YAGvB6B,OAAM,SAAAC,GACLT,GAAW,GACXD,EAAgB,kBAAD,OAAmBH,EAAnB,+CACfpB,IAAuBC,MAAK,SAAAC,GAC1Bd,EAAWc,EAASC,SAEtB4B,YAAW,WACTR,EAAgB,MAChBC,GAAW,KACV,YAhC2C,CACpD,IAAMU,EAAI,YAAO/C,GACjB+C,EAAKC,KAAKR,GACVvC,EAAW8C,GACXlC,EAAqB2B,GACrBJ,EAAgB,SAAD,OAAUH,EAAV,MACfW,YAAW,WACTR,EAAgB,QACf,OAmC+BjD,WAAYA,EAAYC,aAAcA,IACxE,yCACA,uCACA,kBAAC,EAAD,CAASY,QAASA,EAASC,WAAYA,EAAYC,OAAQA,MC1D7C+C,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLiB,QAAQjB,MAAMA,EAAM3B,c","file":"static/js/main.0c2d6eba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ setFilter }) => {\r\n  return (\r\n    <div>\r\n      Filter by name: <input onChange={event => setFilter(event.target.value)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({ addPerson, setNewName, setNewNumber }) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <div>\r\n        name: <input onChange={event => setNewName(event.target.value)} />\r\n      </div>\r\n      <div>\r\n        number: <input onChange={event => setNewNumber(event.target.value)} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"http://localhost:3001/api/persons\";\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  update: update,\r\n  remove: remove\r\n};\r\n","import React from \"react\";\r\nimport personService from \"../services/persons\";\r\n\r\nconst Persons = ({ persons, setPersons, filter }) => {\r\n  const removePerson = person => {\r\n    if (window.confirm(\"Delete person \" + person.name + \"?\")) {\r\n      personService.remove(person.id).then(() => {\r\n        personService.getAll().then(response => {\r\n          setPersons(response.data);\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {persons\r\n        .filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\r\n        .map(person => {\r\n          return (\r\n            <div key={person.name}>\r\n              <p>\r\n                {person.name} {person.number}\r\n              </p>\r\n              <button onClick={() => removePerson(person)}>Delete</button>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message, isError }) => {\r\n  const notificationStyle = {\r\n    color: isError ? \"red\" : \"green\",\r\n    background: \"lightgrey\",\r\n    fontSize: 20,\r\n    borderStyle: \"solid\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  };\r\n\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={notificationStyle} className=\"error\">\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\nimport personService from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const addPerson = event => {\n    event.preventDefault();\n    const obj = { id: persons[persons.length - 1].id + 1, name: newName, number: newNumber };\n    if (!persons.some(person => person.name === newName)) {\n      const copy = [...persons];\n      copy.push(obj);\n      setPersons(copy);\n      personService.create(obj);\n      setErrorMessage(`Added ${newName}.`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        personService\n          .update(persons.find(person => person.name === newName).id, obj)\n          .then(response => {\n            setErrorMessage(`Changed number for ${newName}.`);\n            setTimeout(() => {\n              setErrorMessage(null);\n              setIsError(false);\n            }, 5000);\n            personService.getAll().then(response => {\n              setPersons(response.data);\n            });\n          })\n          .catch(error => {\n            setIsError(true);\n            setErrorMessage(`Information of ${newName} has already been removed from the server.`);\n            personService.getAll().then(response => {\n              setPersons(response.data);\n            });\n            setTimeout(() => {\n              setErrorMessage(null);\n              setIsError(false);\n            }, 5000);\n          });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} isError={isError} />\n      <Filter setFilter={setFilter} />\n      <PersonForm addPerson={addPerson} setNewName={setNewName} setNewNumber={setNewNumber} />\n      <h3>Add a new</h3>\n      <h2>Numbers</h2>\n      <Persons persons={persons} setPersons={setPersons} filter={filter} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}